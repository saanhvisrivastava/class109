# -*- coding: utf-8 -*-
"""class109.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D84V6sLtdjevIIPhBndjWBjCjSGaDgr5
"""

import random
import statistics
import plotly.figure_factory as ff

dice_result=[]
count=[]

for i in range(0,1000):
  dice1=random.randint(1,6)
  dice2=random.randint(1,6)
  dice_result.append(dice1+dice2)

print(dice_result)

mean=sum(dice_result)/len(dice_result)
print("The mean of dice dataset is ",mean)

median=statistics.median(dice_result)
print("the median of dice dataset is",median)

mode=statistics.mode(dice_result)
print("Mode of dice dataset is",mode)

std_deviation=statistics.stdev(dice_result)
print("standard deviation",std_deviation)

first_std_deviation_start,first_std_deviation_end=mean-std_deviation,mean+std_deviation
listofdatawithinfirststddeviation=[result for result in dice_result if
                                   result>first_std_deviation_start and 
                                   result< first_std_deviation_end
                                   ]
print("{}%of data lies within firststandarddeviation".format(len(listofdatawithinfirststddeviation)*100.0/len(dice_result)))                         

secondstddeviationstarts,secondstddeviationends= mean-(2*std_deviation),mean+(2*std_deviation)
listofdatawithinsecondstddeviation=[result for result in dice_result 
                                    if result>secondstddeviationstarts and
                                    result< secondstddeviationends
                                    ]
print("{}% of data lies within secondstandarddeviation".format(len(listofdatawithinsecondstddeviation)*100.0/len(dice_result)))

thirdstddeviationstarts,thirdstddeviationends= mean-(3*std_deviation),mean+(3*std_deviation)
listofdatawithinthirdstddeviation=[result for result in dice_result 
                                    if result>thirdstddeviationstarts and
                                    result< thirdstddeviationends
                                    ]
print("{}% of data lies within thirdstandarddeviation".format(len(listofdatawithinthirdstddeviation)*100.0/len(dice_result)))


fig=ff.create_distplot([dice_result],["result" ],show_hist=False)
fig.show()